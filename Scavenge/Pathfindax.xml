<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pathfindax</name>
    </assembly>
    <members>
        <member name="T:Pathfindax.Algorithms.AStarGridAlgorithm">
            <summary>
            Class that implements the A* algorithm for grids to find paths
            </summary>
        </member>
        <member name="M:Pathfindax.Algorithms.AStarGridAlgorithm.FindPath(Pathfindax.Grid.INodeGrid{Pathfindax.Nodes.AstarGridNode},Pathfindax.PathfindEngine.PathRequest)">
            <inheritdoc />
        </member>
        <member name="T:Pathfindax.Algorithms.IPathFindAlgorithm`1">
            <summary>
            Interface for classes that implement algorithms to find a path.
            </summary>
            <typeparam name="TNodeNetwork"></typeparam>
        </member>
        <member name="M:Pathfindax.Algorithms.IPathFindAlgorithm`1.FindPath(`0,Pathfindax.PathfindEngine.PathRequest)">
            <summary>
            Finds a path from <paramref name="pathRequest"></paramref>.PathStart to <paramref name="pathRequest"></paramref>.PathEnd using the <paramref name="nodeNetwork"></paramref> and returns this as a list of <see cref="T:Pathfindax.Nodes.INode"/>.
            </summary>
            <param name="nodeNetwork">The <typeparamref name="TNodeNetwork"/> in which the pathfinding will be done</param>
            <param name="pathRequest">The <see cref="T:Pathfindax.PathfindEngine.PathRequest"/> that contains the info needed such as the start and end of the path</param>
            <returns>A list of nodes in the defining the path</returns>
        </member>
        <member name="T:Pathfindax.Algorithms.AStarAlgorithm">
            <summary>
            Class that implements the A* algorithm to find paths
            </summary>
        </member>
        <member name="M:Pathfindax.Algorithms.AStarAlgorithm.FindPath(Pathfindax.Grid.INodeNetwork{Pathfindax.Nodes.AstarNode},Pathfindax.PathfindEngine.PathRequest)">
            <inheritdoc />
        </member>
        <member name="T:Pathfindax.Collections.Array2D`1">
            <summary>
            A array class that provides both single dimensional and 2-dimensional access to a array.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:Pathfindax.Collections.Array2D`1.Length">
            <summary>
            The length of the internal array
            </summary>
        </member>
        <member name="P:Pathfindax.Collections.Array2D`1.Width">
            <summary>
            The width of the array in items
            </summary>
        </member>
        <member name="P:Pathfindax.Collections.Array2D`1.Height">
            <summary>
            The height of the array in items
            </summary>
        </member>
        <member name="P:Pathfindax.Collections.Array2D`1.Item(System.Int32,System.Int32)">
            <summary>
            Provides access to the internal array with a 2-dimensional indexer
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:Pathfindax.Collections.Array2D`1.Item(System.Int32)">
            <summary>
            Provides access to the internal array with the standard indexer
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Pathfindax.Collections.Array2D`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Pathfindax.Collections.Array2D`1"/>
            </summary>
            <param name="width">The width of the array in items</param>
            <param name="height">The height of the array in items</param>
        </member>
        <member name="M:Pathfindax.Collections.Array2D`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Pathfindax.Collections.IHeapItem`1">
            <summary>
            Interface for objects that will be used in a <see cref="T:Pathfindax.Collections.MinHeap`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Pathfindax.Collections.IHeapItem`1.HeapIndex">
            <summary>
            The index of the item in the <see cref="T:Pathfindax.Collections.MinHeap`1"/>
            </summary>
        </member>
        <member name="T:Pathfindax.Collections.MinHeap`1">
            <summary>
            A fast minheap that is used as a priority queue for pathfinding.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Pathfindax.Collections.MinHeap`1.Count">
            <summary>
            The current amount of items in the heap.
            </summary>
        </member>
        <member name="M:Pathfindax.Collections.MinHeap`1.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:Pathfindax.Collections.MinHeap`1"/>. The max amount of items in the heap is equal to <paramref name="maxHeapSize"/>
            </summary>
            <param name="maxHeapSize"></param>
        </member>
        <member name="M:Pathfindax.Collections.MinHeap`1.Add(`0)">
            <summary>
            Adds the item to the heap
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">If the interal array is full</exception>
            <param name="item"></param>
        </member>
        <member name="M:Pathfindax.Collections.MinHeap`1.RemoveFirst">
            <summary>
            Removes the first item from the heap. Since this is a minheap it will have the lowest value which is determined by the implementation of the <see cref="T:System.IComparable`1"/> interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pathfindax.Collections.MinHeap`1.Contains(`0)">
            <summary>
            Returns true if this heap contains the <paramref name="item"/>
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Pathfindax.Factories.SourceNodeGridFactory.GeneratePreFilledArray(System.Int32,System.Int32,Duality.Vector2,Pathfindax.Grid.GenerateNodeGridConnections,Duality.Vector2)">
            <summary>
            Returns a preconfigured <see cref="T:Pathfindax.Collections.Array2D`1"/> which can be used to make a <see cref="T:Pathfindax.Grid.SourceNodeGrid"/>
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="nodeSize"></param>
            <param name="generateNodeGridConnections"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Pathfindax.Factories.SourceNodeGridFactory.CalculateGridNodeClearances(Pathfindax.Grid.ISourceNodeGrid{Pathfindax.Nodes.ISourceGridNode},Pathfindax.Nodes.ISourceGridNode,System.Int32)">
            <summary>
            Calculates the clearances up to a maximum <paramref name="maxClearance"/>
            </summary>
            <param name="sourceNodeGrid"></param>
            <param name="from"></param>
            <param name="maxClearance"></param>
            <returns></returns>
        </member>
        <member name="T:Pathfindax.Grid.AstarNodeGrid">
            <summary>
            Contains data specific for the A* algorithm.
            Do not share this between threads.
            </summary>
        </member>
        <member name="M:Pathfindax.Grid.AstarNodeGrid.#ctor(Pathfindax.Grid.ISourceNodeGrid{Pathfindax.Nodes.SourceGridNode})">
            <summary>
            Creates a new instance of the <see cref="T:Pathfindax.Grid.AstarNodeGrid"/>
            </summary>
            <param name="sourceNodeGrid"></param>
        </member>
        <member name="T:Pathfindax.Grid.AstarNodeNetwork">
            <summary>
            A node network for <see cref="T:Pathfindax.Nodes.AstarNode"/>s
            </summary>
        </member>
        <member name="F:Pathfindax.Grid.GenerateNodeGridConnections.None">
            <summary>
            Generate no neighbours.
            </summary>
        </member>
        <member name="F:Pathfindax.Grid.GenerateNodeGridConnections.NoDiagonal">
            <summary>
            Generate neighbours except diagonal neighbours
            </summary>
        </member>
        <member name="F:Pathfindax.Grid.GenerateNodeGridConnections.All">
            <summary>
            Generate all neighbours
            </summary>
        </member>
        <member name="T:Pathfindax.Grid.INodeNetwork`1">
            <summary>
            Generic interface for nodenetworks
            </summary>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="T:Pathfindax.Grid.INodeNetwork">
            <summary>
            Interface for nodenetworks
            </summary>
        </member>
        <member name="T:Pathfindax.Grid.ISourceNodeNetwork`1">
            <summary>
            Generic interface for sourcenodenetworks
            </summary>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="M:Pathfindax.Grid.ISourceNodeNetwork`1.GetNode(System.Single,System.Single)">
            <summary>
            Gets the node closest to this position
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pathfindax.Grid.ISourceNodeNetwork">
            <summary>
            Interface for sourcenodenetworks
            </summary>
        </member>
        <member name="M:Pathfindax.Grid.SourceNodeNetwork.GetNode(System.Single,System.Single)">
            <summary>
            Returns the node closest to this position
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pathfindax.Grid.ISourceNodeGrid`1">
            <summary>
            Generic interface for sourcenodegrids
            </summary>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="T:Pathfindax.Grid.ISourceNodeGrid">
            <summary>
            Interface for sourcenodegrids
            </summary>
        </member>
        <member name="T:Pathfindax.Grid.ISourceNodeNetworkProvider`1">
            <summary>
            Interface for classes that can provide <typeparamref name="TNodeNetwork"/> which will be used as base information for other nodenetworks when for pathfinding
            </summary>
            <typeparam name="TNodeNetwork"></typeparam>
        </member>
        <member name="M:Pathfindax.Grid.ISourceNodeNetworkProvider`1.GenerateGrid2D">
            <summary>
            Generates the <typeparamref name="TNodeNetwork"></typeparamref>
            </summary>
            <returns>The <typeparamref name="TNodeNetwork"></typeparamref></returns>
        </member>
        <member name="T:Pathfindax.Grid.SourceNodeGrid">
            <summary>
            Class that holds nodegrid data which wont change and is safe to share between threads
            </summary>
        </member>
        <member name="P:Pathfindax.Nodes.ISourceGridNode.Connections">
            <summary>
            The connections to other nodes.
            </summary>
        </member>
        <member name="P:Pathfindax.Nodes.ISourceGridNode.MovementPenalty">
            <summary>
            The movement penalty for this node. This can be used to make the pathfinder try to avoid certain nodes.
            </summary>
        </member>
        <member name="P:Pathfindax.Nodes.ISourceGridNode.Clearances">
            <summary>
            The stored clearances. Note that this is not the real clearance but a efficient way of storing them.
            Call <see cref="M:Pathfindax.Nodes.ISourceGridNode.GetTrueClearance(Pathfindax.Nodes.PathfindaxCollisionCategory)"/> if you want the real clearance
            </summary>
        </member>
        <member name="M:Pathfindax.Nodes.ISourceGridNode.GetTrueClearance(Pathfindax.Nodes.PathfindaxCollisionCategory)">
            <summary>
            Calculates the true clearance from the <see cref="P:Pathfindax.Nodes.ISourceGridNode.Clearances"/> for the given <paramref name="collisionCategory"/> and returns this.
            </summary>
            <param name="collisionCategory"></param>
            <returns></returns>
        </member>
        <member name="P:Pathfindax.Nodes.ISourceGridNode.GridX">
            <summary>
            The X position in the grid in nodes
            </summary>
        </member>
        <member name="P:Pathfindax.Nodes.ISourceGridNode.GridY">
            <summary>
            The Y position in the grid in nodes
            </summary>
        </member>
        <member name="P:Pathfindax.Nodes.ISourceNode.ArrayIndex">
            <summary>
            Used to map from the source nodes to the nodes where the actual pathfinding is done.
            </summary>
        </member>
        <member name="P:Pathfindax.Nodes.ISourceNode.WorldPosition">
            <summary>
            The absolute world position
            </summary>
        </member>
        <member name="T:Pathfindax.Nodes.AstarNode">
            <summary>
            Represents a node that can be used with the A* algorithm.
            </summary>
        </member>
        <member name="P:Pathfindax.Nodes.AstarNode.Parent">
            <summary>
            Used to retrace the path in the A* algorithm.
            </summary>
        </member>
        <member name="P:Pathfindax.Nodes.AstarNode.HCost">
            <summary>
            The cost calculated by the A* heuristic
            </summary>
        </member>
        <member name="P:Pathfindax.Nodes.AstarNode.GCost">
            <summary>
            The cost to the targetnode
            </summary>
        </member>
        <member name="P:Pathfindax.Nodes.SourceGridNode.WorldPosition">
            <inheritdoc />
        </member>
        <member name="P:Pathfindax.Nodes.SourceGridNode.Clearances">
            <inheritdoc />
        </member>
        <member name="P:Pathfindax.Nodes.SourceGridNode.MovementPenalty">
            <inheritdoc />
        </member>
        <member name="P:Pathfindax.Nodes.SourceGridNode.GridX">
            <inheritdoc />
        </member>
        <member name="P:Pathfindax.Nodes.SourceGridNode.GridY">
            <inheritdoc />
        </member>
        <member name="P:Pathfindax.Nodes.SourceGridNode.ArrayIndex">
            <inheritdoc />
        </member>
        <member name="P:Pathfindax.Nodes.SourceGridNode.Connections">
            <inheritdoc />
        </member>
        <member name="M:Pathfindax.Nodes.SourceGridNode.GetTrueClearance(Pathfindax.Nodes.PathfindaxCollisionCategory)">
            <inheritdoc />
        </member>
        <member name="T:Pathfindax.Nodes.AstarGridNode">
            <summary>
            Represents a gridnode that can be used with the A* algorithm.
            </summary>
        </member>
        <member name="P:Pathfindax.Nodes.AstarGridNode.Parent">
            <summary>
            Used to retrace the path in the A* algorithm.
            </summary>
        </member>
        <member name="P:Pathfindax.Nodes.AstarGridNode.HCost">
            <summary>
            The cost calculated by the A* heuristic
            </summary>
        </member>
        <member name="P:Pathfindax.Nodes.AstarGridNode.GCost">
            <summary>
            The cost to the targetnode
            </summary>
        </member>
        <member name="P:Pathfindax.Nodes.AstarGridNode.HeapIndex">
            <inheritdoc />
        </member>
        <member name="P:Pathfindax.Nodes.SourceNode.MovementPenalty">
            <summary>
            The movement penalty for this node. This can be used to make the pathfinder try to avoid certain nodes.
            </summary>
        </member>
        <member name="T:Pathfindax.Nodes.NodeConnection">
            <summary>
            Represents a connection to another node.
            </summary>
        </member>
        <member name="F:Pathfindax.Nodes.NodeConnection.To">
            <summary>
            Where this connection is going to.
            </summary>
        </member>
        <member name="F:Pathfindax.Nodes.NodeConnection.CollisionCategory">
            <summary>
            The collisions in this connection
            </summary>
        </member>
        <member name="M:Pathfindax.Nodes.NodeConnection.#ctor(System.Int32,Pathfindax.Nodes.PathfindaxCollisionCategory)">
            <summary>
            Creates a new <see cref="T:Pathfindax.Nodes.NodeConnection"/>.
            </summary>
            <param name="to">Where this connection is going to</param>
            <param name="collisionCategory">The <see cref="T:Pathfindax.Nodes.PathfindaxCollisionCategory"/> of this <see cref="T:Pathfindax.Nodes.NodeConnection"/></param>
        </member>
        <member name="F:Pathfindax.PathfindEngine.PathRequestStatus.Created">
            <summary>
            The <see cref="T:Pathfindax.PathfindEngine.PathRequest"/> is created but no <see cref="T:Pathfindax.PathfindEngine.IPathfinder"/> is solving it.
            </summary>
        </member>
        <member name="F:Pathfindax.PathfindEngine.PathRequestStatus.Solving">
            <summary>
            A <see cref="T:Pathfindax.PathfindEngine.IPathfinder"/> is solving this <see cref="T:Pathfindax.PathfindEngine.PathRequest"/> or its waiting in the queue.
            </summary>
        </member>
        <member name="F:Pathfindax.PathfindEngine.PathRequestStatus.Solved">
            <summary>
            A path was found.
            </summary>
        </member>
        <member name="F:Pathfindax.PathfindEngine.PathRequestStatus.NoPathFound">
            <summary>
            The path could not be solved
            </summary>
        </member>
        <member name="M:Pathfindax.PathfindEngine.IPathfinder`1.ProcessCompletedPaths">
            <summary>
            This will process any completedpaths.
            </summary>
        </member>
        <member name="M:Pathfindax.PathfindEngine.IPathfinder`1.Start">
            <summary>
            Starts the pathfinder.
            </summary>
        </member>
        <member name="M:Pathfindax.PathfindEngine.IPathfinder`1.Stop">
            <summary>
            Stops the pathfinder.
            </summary>
        </member>
        <member name="M:Pathfindax.PathfindEngine.IPathfinder.RequestPath(Pathfindax.PathfindEngine.PathRequest)">
            <summary>
            Requests a path.
            </summary>
            <param name="pathRequest"></param>
        </member>
        <member name="T:Pathfindax.PathfindEngine.Pathfinder`2">
            <summary>
            Provides multithreading functionality using a producer consumer queue
            </summary>
            <typeparam name="TSourceNodeNetwork"></typeparam>
            <typeparam name="TThreadNodeNetwork"></typeparam>
        </member>
        <member name="M:Pathfindax.PathfindEngine.Pathfinder`2.#ctor(`0,System.Func{`0,Pathfindax.PathfindEngine.PathRequestProcesser{`1}},System.Int32)">
            <summary>
            Creates a new <see cref="T:Pathfindax.PathfindEngine.Pathfinder`2"/>
            </summary>
            <param name="sourceNodeNetwork"></param>
            <param name="processerConstructor">Used to construct the processers for each thread</param>
            <param name="threads">The amount of threads that will be used</param>
        </member>
        <member name="M:Pathfindax.PathfindEngine.Pathfinder`2.Start">
            <summary>
            Starts giving the pathfinders paths to solve if there are any
            </summary>
        </member>
        <member name="M:Pathfindax.PathfindEngine.Pathfinder`2.Stop">
            <summary>
            Stops giving the pathfinders paths to solve if there are any
            </summary>
        </member>
        <member name="M:Pathfindax.PathfindEngine.Pathfinder`2.RequestPath(Pathfindax.PathfindEngine.PathRequest)">
            <summary>
            Requests a path
            </summary>
            <param name="pathRequest"></param>
        </member>
        <member name="M:Pathfindax.PathfindEngine.Pathfinder`2.ProcessCompletedPaths">
            <summary>
            Calls the callbacks on the <see cref="T:Pathfindax.PathfindEngine.PathRequest"/>s and removes them from the completed queue.
            </summary>
        </member>
        <member name="M:Pathfindax.PathfindEngine.Pathfinder`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Pathfindax.PathfindEngine.PathRequestProcesser`1">
            <summary>
            Processes a <see cref="T:Pathfindax.PathfindEngine.PathRequest"/>
            </summary>
            <typeparam name="TNodeNetwork"></typeparam>
        </member>
        <member name="M:Pathfindax.PathfindEngine.PathRequestProcesser`1.#ctor(`0,Pathfindax.Algorithms.IPathFindAlgorithm{`0},System.Collections.Generic.IList{Pathfindax.PathfindEngine.IPathPostProcess})">
            <summary>
            Initialises a new <see cref="T:Pathfindax.PathfindEngine.PathRequestProcesser`1"/> with a <see cref="T:Pathfindax.Algorithms.IPathFindAlgorithm`1"/> and optional post processing steps.
            </summary>
            <param name="nodeNetwork">The <typeparamref name="TNodeNetwork"/> that will be used to solve paths</param>
            <param name="pathFindAlgorithm">The <see cref="T:Pathfindax.Algorithms.IPathFindAlgorithm`1"/> that will be used to solve paths</param>
            <param name="pathPostProcesses">The post processing steps that will be applied after the <see cref="T:Pathfindax.Algorithms.IPathFindAlgorithm`1"/> found a path</param>
        </member>
        <member name="M:Pathfindax.PathfindEngine.PathRequestProcesser`1.Process(Pathfindax.PathfindEngine.PathRequest)">
            <summary>
            Processes a <see cref="T:Pathfindax.PathfindEngine.PathRequest"/>
            </summary>
            <param name="pathRequest"></param>
        </member>
        <member name="T:Pathfindax.PathfindEngine.PathRequest">
            <summary>
            A class with all the information needed to calculate a path from A to B.
            </summary>
        </member>
        <member name="F:Pathfindax.PathfindEngine.PathRequest.PathStart">
            <summary>
            The node start node.
            </summary>
        </member>
        <member name="F:Pathfindax.PathfindEngine.PathRequest.PathEnd">
            <summary>
            The end node.
            </summary>
        </member>
        <member name="F:Pathfindax.PathfindEngine.PathRequest.AgentSize">
            <summary>
            The size of the agent. 1 is the default value meaning that the agent occupies only 1 node.
            </summary>
        </member>
        <member name="F:Pathfindax.PathfindEngine.PathRequest.CollisionLayer">
            <summary>
            The CollisionLayer. Multiple categories can be active at the same time.
            </summary>
        </member>
        <member name="F:Pathfindax.PathfindEngine.PathRequest._callbacks">
            <summary>
            The callback that will be called after the pathfinder finds a path or cannot find one.
            </summary>
        </member>
        <member name="P:Pathfindax.PathfindEngine.PathRequest.CompletedPath">
            <summary>
            The calculated path. Will be null unless the <see cref="P:Pathfindax.PathfindEngine.PathRequest.Status"/> is equal to <see cref="F:Pathfindax.PathfindEngine.PathRequestStatus.Solved"/>
            </summary>
        </member>
        <member name="P:Pathfindax.PathfindEngine.PathRequest.Status">
            <summary>
            The status of this <see cref="T:Pathfindax.PathfindEngine.PathRequest"/>. See <see cref="T:Pathfindax.PathfindEngine.PathRequestStatus"/> for more info.
            </summary>
        </member>
        <member name="P:Pathfindax.PathfindEngine.PathRequest.WaitHandle">
            <summary>
            Will be set when the <see cref="P:Pathfindax.PathfindEngine.PathRequest.Status"/> is equal or greater than <see cref="F:Pathfindax.PathfindEngine.PathRequestStatus.Solved"/>.
            </summary>
        </member>
        <member name="M:Pathfindax.PathfindEngine.PathRequest.#ctor(Pathfindax.Nodes.ISourceNode,Pathfindax.Nodes.ISourceNode,Pathfindax.Nodes.PathfindaxCollisionCategory,System.Byte)">
            <summary>
            Creates a new <see cref="T:Pathfindax.PathfindEngine.PathRequest"/>
            </summary>
            <param name="start">The worldcoordinates of the start of the path</param>
            <param name="end">The worldcoordinates of the end of the path</param>
            <param name="agentSize">The size of the agent in nodes</param>
            <param name="collisionLayer">The collision layers that this agent cannot cross</param>
        </member>
        <member name="M:Pathfindax.PathfindEngine.PathRequest.#ctor(Pathfindax.PathfindEngine.IPathfinder,Pathfindax.Nodes.ISourceNode,Pathfindax.Nodes.ISourceNode,Pathfindax.Nodes.PathfindaxCollisionCategory,System.Byte)">
            <summary>
            Creates a new <see cref="T:Pathfindax.PathfindEngine.PathRequest"/> and starts pathfinding using the <paramref name="pathfinder"/>
            </summary>
            <param name="pathfinder">The pathfinder that will be used to solve the path</param>
            <param name="start">The worldcoordinates of the start of the path</param>
            <param name="end">The worldcoordinates of the end of the path</param>
            <param name="agentSize">The size of the agent in nodes</param>
            <param name="collisionLayer">The collision layers that this agent cannot cross</param>
        </member>
        <member name="M:Pathfindax.PathfindEngine.PathRequest.StartSolvePath(Pathfindax.PathfindEngine.IPathfinder)">
            <summary>
            Starts solving the path using the provided <paramref name="pathfinder"/>.
            </summary>
            <param name="pathfinder"></param>
        </member>
        <member name="M:Pathfindax.PathfindEngine.PathRequest.AddCallback(System.Action{Pathfindax.PathfindEngine.PathRequest})">
            <summary>
            Adds a new callback to this <see cref="T:Pathfindax.PathfindEngine.PathRequest"/>
            </summary>
            <param name="callback">The callback that will be called when the pathfinder has solved this <see cref="T:Pathfindax.PathfindEngine.PathRequest"/></param>
        </member>
        <member name="T:Pathfindax.Utils.GridClearanceHelper">
            <summary>
            Helper class for grid clearances
            </summary>
        </member>
        <member name="M:Pathfindax.Utils.GridClearanceHelper.GridNodeOffset(System.Int32,System.Single)">
            <summary>
            Calculates the offset for grid based clearance
            </summary>
        </member>
        <member name="T:Pathfindax.Threading.MultithreadedWorkerQueue`1">
            <summary>
            Queues items and processes them with one or multiple threads
            </summary>
            <typeparam name="TIn"></typeparam>
        </member>
        <member name="M:Pathfindax.Threading.MultithreadedWorkerQueue`1.Start">
            <summary>
            Starts checking the queue for work to do
            </summary>
        </member>
        <member name="M:Pathfindax.Threading.MultithreadedWorkerQueue`1.Stop">
            <summary>
            Stops checking the queue for work to do
            </summary>
        </member>
        <member name="M:Pathfindax.Threading.MultithreadedWorkerQueue`1.Enqueue(`0)">
            <summary>
            Enqueues a new work item in the queue.
            </summary>
            <param name="workItem"></param>
            <returns></returns>
        </member>
        <member name="M:Pathfindax.Threading.MultithreadedWorkerQueue`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Pathfindax.Threading.Worker`1">
            <summary>
            Class for doing work on a dedicated thread
            </summary>
            <typeparam name="TIn"></typeparam>
        </member>
        <member name="P:Pathfindax.Threading.Worker`1.IsBusy">
            <summary>
            True if this <see cref="T:Pathfindax.Threading.Worker`1"/> is doing work.
            </summary>
        </member>
        <member name="M:Pathfindax.Threading.Worker`1.#ctor(Pathfindax.Threading.IProcesser{`0})">
            <summary>
            Creates a new worker that will start doing its work on a dedicated thread.
            </summary>
            <param name="processer"></param>
        </member>
        <member name="M:Pathfindax.Threading.Worker`1.Start">
            <summary>
            Starts the worker
            </summary>
        </member>
        <member name="M:Pathfindax.Threading.Worker`1.DoWork(`0,System.Action{`0})">
            <summary>
            Starts working on a work item on a dedicated thread
            </summary>
            <param name="taskCompletionSource">The work item</param>
            <param name="onCompleted"></param>
            <returns>True if the worker was not busy and the work was accepted</returns>
        </member>
        <member name="M:Pathfindax.Threading.Worker`1.Dispose">
            <inheritdoc />
        </member>
    </members>
</doc>
